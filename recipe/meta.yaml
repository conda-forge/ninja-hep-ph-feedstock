{% set name = "ninja" %}
{% set version = "1.1.0" %}

package:
  # Have top level name be unique from any outputs
  # c.f. https://github.com/conda-forge/conda-forge.github.io/blob/abfc33db28c35e9a8f6b719d0021768f0d5d06be/docs/maintainer/knowledge_base.md?plain=1#L1749
  name: {{ name }}-split
  version: {{ version }}

source:
  # https://github.com/peraro/ninja/releases/tag/v1.1.0 fails to compile so fall back to hepforge
  url: https://www.hepforge.org/archive/ninja/ninja-{{ version }}.tar.gz
  sha256: 04b544a8b9d3e5be28e60d7e808ee4a91e9e5196783148b5e6ec5046e78e836b
  patches:
    - posix-compliant-shell.patch
    # c.f. https://github.com/peraro/ninja/issues/5
    - remove-version-file.patch

build:
  number: 2

outputs:
  - name: {{ name }}-hep-ph

    script: build_shared.sh

    build:
      skip: true  # [win]
      run_exports:
        - {{ pin_subpackage('ninja-hep-ph', max_pin='x.x') }}

    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}
        - automake  # includes autoconf
        - libtool
        - make
        - pkg-config
        - gnuconfig
        - gawk
        - sed
        - grep
        - oneloop  # [build_platform != target_platform]
      host:
        - oneloop
      run:
        - oneloop

    test:
      # As need to regenerate Makefiles, need all of the source files that
      # configure uses to do so
      source_files:
        - examples/
        - m4/
        - src/
        - Makefile.am
        - configure.ac
      requires:
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}
        - automake
        - libtool
        - make
        - gawk
        - sed
        - grep
      commands:
        - test -f $PREFIX/lib/libninja${SHLIB_EXT}
        # c.f. https://github.com/conda/conda-build/issues/3075
        - test ! -f $PREFIX/lib/libninja.la
        - test ! -f $PREFIX/lib/libninja.a
        - test -f $PREFIX/bin/ninja-config
        - test -f $PREFIX/include/mninja.mod
        - test -f $PREFIX/include/ninja/avholo.hh
        - test -f $PREFIX/include/ninja/integral_library.hh
        - test -f $PREFIX/include/ninja/momentum.hh
        - test -f $PREFIX/include/ninja/ninja.hh
        - test -f $PREFIX/include/ninja/ninja_config.h
        - test -f $PREFIX/include/ninja/ninja_in.hh
        - test -f $PREFIX/include/ninja/ninjanumgen.hh
        - test -f $PREFIX/include/ninja/num_defs.hh
        - test -f $PREFIX/include/ninja/rambo.hh
        - test -f $PREFIX/include/ninja/s_mat.hh
        - test -f $PREFIX/include/ninja/spinors.hh
        - test -f $PREFIX/include/ninja/static_arrays.hh
        - test -f $PREFIX/include/ninja/tensor_ninja.hh
        - test -f $PREFIX/include/ninja/thread_safe_integral_library.hh
        - test -f $PREFIX/include/ninja/types.hh
        - test -f $PREFIX/include/ninja/zero_float.hh
        - test -f $PREFIX/include/ninjago_module.mod
        - test -f $PREFIX/include/ninjavholo.mod
      {% if (linux and (x86_64 or ppc64le)) %}
        - test -f $PREFIX/include/quadninja/avholo.hh
        - test -f $PREFIX/include/quadninja/integral_library.hh
        - test -f $PREFIX/include/quadninja/momentum.hh
        - test -f $PREFIX/include/quadninja/ninja.hh
        - test -f $PREFIX/include/quadninja/ninja_config.h
        - test -f $PREFIX/include/quadninja/ninja_in.hh
        - test -f $PREFIX/include/quadninja/ninjanumgen.hh
        - test -f $PREFIX/include/quadninja/num_defs.hh
        - test -f $PREFIX/include/quadninja/quadruple.hh
        - test -f $PREFIX/include/quadninja/rambo.hh
        - test -f $PREFIX/include/quadninja/s_mat.hh
        - test -f $PREFIX/include/quadninja/spinors.hh
        - test -f $PREFIX/include/quadninja/static_arrays.hh
        - test -f $PREFIX/include/quadninja/tensor_ninja.hh
        - test -f $PREFIX/include/quadninja/thread_safe_integral_library.hh
        - test -f $PREFIX/include/quadninja/types.hh
        - test -f $PREFIX/include/quadninja/zero_float.hh
      {% else %}
        - test ! -d $PREFIX/include/quadninja
      {% endif %}

        - ninja-config --help
        - ninja-config --version
        - ninja-config --quadsupport

        # Given the way the examples/Makefile works, need to regenerate it and
        # other supporting files with configure again
        - autoreconf --install

      {% if (linux and (x86_64 or ppc64le)) %}
        - ./configure --prefix=$PREFIX --enable-shared=yes --enable-static=no --enable-higher_rank --enable-quadninja --with-avholo="$FFLAGS -lavh_olo" FCINCLUDE="${FCINCLUDE} -I$PREFIX/include/oneloop"
      {% else %}
        - ./configure --prefix=$PREFIX --enable-shared=yes --enable-static=no --enable-higher_rank --disable-quadninja --with-avholo="$FFLAGS -lavh_olo" FCINCLUDE="${FCINCLUDE} -I$PREFIX/include/oneloop"  # [not osx]
        - ./configure --prefix=$PREFIX --enable-shared=yes --enable-static=no --enable-higher_rank --disable-quadninja --with-avholo="$FFLAGS -lavh_olo" FCINCLUDE="${FCINCLUDE} -I$PREFIX/include/oneloop" CXX="${CXX}" CXXFLAGS="-O2 -fcx-fortran-rules -fno-exceptions -fno-rtti ${CXXFLAGS}" CPPFLAGS="${CPPFLAGS} -DNINJA_NO_EXCEPTIONS -fPIC" LIBS="-lc++" LDFLAGS="-Wl,-no_compact_unwind ${LDFLAGS}"  # [osx]
      {% endif %}
        - make clean
        - make examples

        - cd examples
        - echo -e "\n# simple_test"
        - ./simple_test
        - echo -e "\n# simple_higher_rank_test"
        - ./simple_higher_rank_test
        - echo -e "\n# tensor_test"
        - ./tensor_test
        - echo -e "\n# tensor_higher_rank_test"
        - ./tensor_higher_rank_test
        - echo -e "\n# 4photons"
        - ./4photons
        - echo -e "\n# 6photons"
        - ./6photons
        - echo -e "\n# ttbarh"
        - ./ttbarh

        # Show how to build manually
        - make clean
        - echo -e "\n# simple_test by hand"
      {% if (linux and (x86_64 or ppc64le)) %}
        - $CXX simple_test.cc mynum.cc -o simple_test $CXXFLAGS -I./ -I$PREFIX/include/ninja $LDFLAGS -lninja -lavh_olo -lgfortran -lquadmath
      {% else %}
        - $CXX simple_test.cc mynum.cc -o simple_test $CXXFLAGS -I./ -I$PREFIX/include/ninja $LDFLAGS -lninja -lavh_olo -lgfortran  # [not osx]
        - $CXX simple_test.cc mynum.cc -o simple_test $CXXFLAGS -I./ -I$PREFIX/include/ninja $LDFLAGS -lninja -lavh_olo -lgfortran  # [osx]
      {% endif %}
        - ./simple_test

        - make clean
        - cd ..
        - make clean

  - name: {{ name }}-hep-ph-static

    script: build_static.sh

    build:
      skip: true  # [win]

    requirements:
      build:
        - {{ stdlib('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}
        - automake  # includes autoconf
        - libtool
        - make
        - pkg-config
        - gnuconfig
        - gawk
        - sed
        - grep
        - oneloop-static  # [build_platform != target_platform]
      host:
        - oneloop-static

    test:
      # As need to regenerate Makefiles, need all of the source files that
      # configure uses to do so
      source_files:
        - examples/
        - m4/
        - src/
        - Makefile.am
        - configure.ac
      requires:
        - {{ compiler('cxx') }}
        - {{ compiler('fortran') }}
        - automake
        - libtool
        - make
        - pkg-config
        - gnuconfig
        - gawk
        - sed
        - grep
        # libavh_olo.a are needed at linktime, but not at runtime
        - oneloop-static
      commands:
        - test -f $PREFIX/lib/libninja.a
        # c.f. https://github.com/conda/conda-build/issues/3075
        - test ! -f $PREFIX/lib/libninja.la
        - test ! -f $PREFIX/lib/libninja${SHLIB_EXT}
        - test -f $PREFIX/bin/ninja-config
        - test -f $PREFIX/include/mninja.mod
        - test -f $PREFIX/include/ninja/avholo.hh
        - test -f $PREFIX/include/ninja/integral_library.hh
        - test -f $PREFIX/include/ninja/momentum.hh
        - test -f $PREFIX/include/ninja/ninja.hh
        - test -f $PREFIX/include/ninja/ninja_config.h
        - test -f $PREFIX/include/ninja/ninja_in.hh
        - test -f $PREFIX/include/ninja/ninjanumgen.hh
        - test -f $PREFIX/include/ninja/num_defs.hh
        - test -f $PREFIX/include/ninja/rambo.hh
        - test -f $PREFIX/include/ninja/s_mat.hh
        - test -f $PREFIX/include/ninja/spinors.hh
        - test -f $PREFIX/include/ninja/static_arrays.hh
        - test -f $PREFIX/include/ninja/tensor_ninja.hh
        - test -f $PREFIX/include/ninja/thread_safe_integral_library.hh
        - test -f $PREFIX/include/ninja/types.hh
        - test -f $PREFIX/include/ninja/zero_float.hh
        - test -f $PREFIX/include/ninjago_module.mod
        - test -f $PREFIX/include/ninjavholo.mod
      {% if (linux and (x86_64 or ppc64le)) %}
        - test -f $PREFIX/include/quadninja/avholo.hh
        - test -f $PREFIX/include/quadninja/integral_library.hh
        - test -f $PREFIX/include/quadninja/momentum.hh
        - test -f $PREFIX/include/quadninja/ninja.hh
        - test -f $PREFIX/include/quadninja/ninja_config.h
        - test -f $PREFIX/include/quadninja/ninja_in.hh
        - test -f $PREFIX/include/quadninja/ninjanumgen.hh
        - test -f $PREFIX/include/quadninja/num_defs.hh
        - test -f $PREFIX/include/quadninja/quadruple.hh
        - test -f $PREFIX/include/quadninja/rambo.hh
        - test -f $PREFIX/include/quadninja/s_mat.hh
        - test -f $PREFIX/include/quadninja/spinors.hh
        - test -f $PREFIX/include/quadninja/static_arrays.hh
        - test -f $PREFIX/include/quadninja/tensor_ninja.hh
        - test -f $PREFIX/include/quadninja/thread_safe_integral_library.hh
        - test -f $PREFIX/include/quadninja/types.hh
        - test -f $PREFIX/include/quadninja/zero_float.hh
      {% else %}
        - test ! -d $PREFIX/include/quadninja
      {% endif %}

        - ninja-config --help
        - ninja-config --version
        - ninja-config --quadsupport

        # Given the way the examples/Makefile works, need to regenerate it and
        # other supporting files with configure again
        - autoreconf --install
      {% if (linux and (x86_64 or ppc64le)) %}
        - ./configure --prefix=$PREFIX --enable-shared=no --enable-static=yes --enable-higher_rank --enable-quadninja --with-avholo="${FFLAGS} -lavh_olo" FCINCLUDE="${FCINCLUDE} -I${PREFIX}/include/oneloop"
      {% else %}
        - ./configure --prefix=$PREFIX --enable-shared=no --enable-static=yes --enable-higher_rank --disable-quadninja --with-avholo="${FFLAGS} -lavh_olo" FCINCLUDE="${FCINCLUDE} -I${PREFIX}/include/oneloop"  # [not osx]
        - ./configure --prefix=$PREFIX --enable-shared=no --enable-static=yes --enable-higher_rank --disable-quadninja --with-avholo="${FFLAGS} -lavh_olo -lgfortran" FCINCLUDE="${FCINCLUDE} -I${PREFIX}/include/oneloop" CXX="${CXX}" CXXFLAGS="-O2 -fcx-fortran-rules -fno-exceptions -fno-rtti ${CXXFLAGS}" CPPFLAGS="${CPPFLAGS} -DNINJA_NO_EXCEPTIONS -fPIC" --disable-quadninja LIBS="-lc++" LDFLAGS="-Wl,-no_compact_unwind ${LDFLAGS}"  # [osx]
      {% endif %}
        - make clean
        - make examples

        - cd examples
        - echo -e "\n# simple_test"
        - ./simple_test
        - echo -e "\n# simple_higher_rank_test"
        - ./simple_higher_rank_test
        - echo -e "\n# tensor_test"
        - ./tensor_test
        - echo -e "\n# tensor_higher_rank_test"
        - ./tensor_higher_rank_test
        - echo -e "\n# 4photons"
        - ./4photons
        - echo -e "\n# 6photons"
        - ./6photons
        - echo -e "\n# ttbarh"
        - ./ttbarh

        # Show how to build manually
        - make clean
        - echo -e "\n# simple_test by hand"

      {% if (linux and (x86_64 or ppc64le)) %}
        - $CXX simple_test.cc mynum.cc -o simple_test $CXXFLAGS -I./ -I$PREFIX/include/ninja $LDFLAGS -lninja -lavh_olo -lgfortran -lquadmath
      {% else %}
        - $CXX simple_test.cc mynum.cc -o simple_test $CXXFLAGS -I./ -I$PREFIX/include/ninja $LDFLAGS -lninja -lavh_olo -lgfortran  # [not osx]
        - $CXX simple_test.cc mynum.cc -o simple_test $CXXFLAGS -I./ -I$PREFIX/include/ninja $LDFLAGS -lninja -lavh_olo -lgfortran  # [osx]
      {% endif %}
        - ./simple_test

        - make clean
        - cd ..
        - make clean

about:
  home: https://github.com/peraro/ninja
  summary: 'Ninja: Automated Integrand Reduction via Laurent Expansion for One-Loop Amplitudes'
  description: |
    Ninja implements the Laurent series expansion method for the computation of
    one-loop integrals.

    It is based on:
    * P. Mastrolia, E. Mirabella and T. Peraro, "_Integrand reduction of
    one-loop scattering amplitudes through Laurent series expansion_,"
    JHEP 1206 (2012) 095
    [arXiv:1203.0291 [hep-ph]](https://arxiv.org/abs/1203.0291)
    DOI: [10.1007/JHEP06(2012)095](https://doi.org/10.1007/JHEP06(2012)095)
    * T. Peraro, "_Ninja: Automated Integrand Reduction via Laurent Expansion
    for One-Loop Amplitudes_," Comput. Phys. Commun. 185 (2014) 2771
    [arXiv:1403.1229 [hep-ph]](http://arxiv.org/abs/1403.1229)
    DOI: [10.1016/j.cpc.2014.06.017](https://doi.org/10.1016/j.cpc.2014.06.017)
  license: GPL-3.0-only
  license_family: GPL
  license_file: COPYING
  dev_url: https://github.com/peraro/ninja

extra:
  feedstock-name: ninja-hep-ph
  recipe-maintainers:
    - matthewfeickert
