From 344f2379fd22d7e44ae14c02eb225f98b38d7b12 Mon Sep 17 00:00:00 2001
From: Alexander Puck Neuwirth <alexander@neuwirth-informatik.de>
Date: Mon, 3 Jun 2024 23:34:46 +0200
Subject: [PATCH] Fix Shell commands to be POSIX compliant

---
 configure.ac | 24 ++++++++++++------------
 1 file changed, 12 insertions(+), 12 deletions(-)

diff --git a/configure.ac b/configure.ac
index 817c660..c9f73fb 100644
--- a/configure.ac
+++ b/configure.ac
@@ -52,7 +52,7 @@ AC_ARG_WITH([avholo],
     you should add its directory to the FCINCLUDE variable)]),
     [],
     [with_avholo=no])
-AS_IF([test "x$with_avholo" == xyes],
+AS_IF([test "x$with_avholo" = xyes],
        [AC_SUBST([AVHFLAGS], ["-lavh_olo"])
         AC_DEFINE([NINJA_USE_ONELOOP], [1],
         [Define to 1 if you have OneLoop.])
@@ -65,7 +65,7 @@ AS_IF([test "x$with_avholo" == xyes],
         [avholo=true]
         ],
         [avholo=false])
-AM_CONDITIONAL(AVHOLO, test "x$avholo" == xtrue)
+AM_CONDITIONAL(AVHOLO, test "x$avholo" = xtrue)
 
 # Choose whether an internal integral cache for the OneLoop library
 # should be used
@@ -89,7 +89,7 @@ AC_ARG_WITH([looptools],
                   CPPFLAGS variable)]),
                   [],
                   [with_looptools=no])
-AS_IF([test "x$with_looptools" == xyes],
+AS_IF([test "x$with_looptools" = xyes],
        [AC_SUBST([LTFLAGS], ["-looptools"])
         AC_DEFINE([NINJA_USE_LOOPTOOLS], [1], [Define if you have LoopTools.])
         [looptools=true]
@@ -100,13 +100,13 @@ AS_IF([test "x$with_looptools" == xyes],
         [looptools=true]
         ],
         [looptools=false])
-AM_CONDITIONAL(LOOPTOOLS, test "x$looptools" == xtrue)
-AS_IF([test "x$looptools" == xtrue],
+AM_CONDITIONAL(LOOPTOOLS, test "x$looptools" = xtrue)
+AS_IF([test "x$looptools" = xtrue],
     [[case $host_os in
       darwin*)
          exninjastatic=true
     esac]])
-AM_CONDITIONAL(EXNINJASTATIC, test "x$exninjastatic" == xtrue)
+AM_CONDITIONAL(EXNINJASTATIC, test "x$exninjastatic" = xtrue)
 
 # Always enable massless specialization
 AC_DEFINE([NINJA_MASSLESS], [1],
@@ -146,7 +146,7 @@ AS_IF([test "x$with_quadruple" != xno] || [test "x$enable_quadninja" != xno],
 )
 
 # Quadruple precision
-AS_IF([test "x$with_quadruple" == xyes],
+AS_IF([test "x$with_quadruple" = xyes],
        AC_SUBST([QUADRUPLEFLAGS], ["-lquadmath"])
        AC_DEFINE([NINJA_QUADRUPLE], [1],
        [Define to 1 if Ninja is compiled in quadruple precision.])
@@ -157,10 +157,10 @@ AS_IF([test "x$with_quadruple" == xyes],
        [Define to 1 if Ninja is compiled in quadruple precision.])
        [quadruple=true],
        [quadruple=false])
-AM_CONDITIONAL(QUADRUPLE, test "x$quadruple" == xtrue)
+AM_CONDITIONAL(QUADRUPLE, test "x$quadruple" = xtrue)
 
 # Quadninja
-AS_IF([test "x$enable_quadninja" == xyes],
+AS_IF([test "x$enable_quadninja" = xyes],
        AC_SUBST([QUADRUPLEFLAGS], ["-lquadmath"])
        AC_DEFINE([QUADNINJA], [1],
        [Define to 1 if QuadNinja is built.])
@@ -171,7 +171,7 @@ AS_IF([test "x$enable_quadninja" == xyes],
        [Define to 1 if QuadNinja is built.])
        [quadninja=true],
        [quadninja=false])
-AM_CONDITIONAL(QUADNINJA, test "x$quadninja" == xtrue)
+AM_CONDITIONAL(QUADNINJA, test "x$quadninja" = xtrue)
 
 # Set up macros for QuadNinja
 AS_IF([test "x$enable_quadninja" != xno],
@@ -201,7 +201,7 @@ AC_ARG_ENABLE([gosam],
 AS_IF([test "x$enable_gosam" != xno], [gosam=true],
  [gosam=false]
   )
-AM_CONDITIONAL(GOSAM, test "x$gosam" == xtrue)
+AM_CONDITIONAL(GOSAM, test "x$gosam" = xtrue)
 AM_CONDITIONAL(NINJAGOSAMCONTRIB, false)
 
 # Choose whether compiling interfaces: f90 module
@@ -210,7 +210,7 @@ AC_ARG_ENABLE([f90module],
 AS_IF([test "x$enable_f90module" != xno], [f90module=true],
  [f90module=false]
   )
-AM_CONDITIONAL(F90MODULE, test "x$f90module" == xtrue)
+AM_CONDITIONAL(F90MODULE, test "x$f90module" = xtrue)
 
 AC_ARG_VAR([FCINCLUDE],[additional Fortran include flags, e.g. \
                         -I<include dir> if you have fortran modules \
