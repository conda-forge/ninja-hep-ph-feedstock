schema_version: 1

context:
  name: ninja
  version: 1.2.0

recipe:
  # Have top level name be unique from any outputs
  # c.f. https://github.com/conda-forge/conda-forge.github.io/blob/abfc33db28c35e9a8f6b719d0021768f0d5d06be/docs/maintainer/knowledge_base.md?plain=1#L1749
  name: ${{ name }}-split
  version: ${{ version }}

source:
  url: https://github.com/peraro/ninja/archive/v${{ version }}.tar.gz
  sha256: b9709aada408286b6533ac7427bab9d1364d449a9c11098c324ea0875fe9a9e1
  patches:
    - posix-compliant-shell.patch
    - update-version-number-to-v1.2.0.patch
    # c.f. https://github.com/peraro/ninja/issues/5
    - remove-version-file.patch

build:
  number: 8

outputs:
  - package:
      name: ${{ name }}-hep-ph
    build:
      skip: win
      script:
        file: build_shared.sh
    requirements:
      build:
        - ${{ stdlib('c') }}
        - ${{ compiler('cxx') }}
        - ${{ compiler('fortran') }}
        - automake  # includes autoconf
        - libtool
        - make
        - pkg-config
        - gnuconfig
        - gawk
        - sed
        - grep
        - if: build_platform != target_platform
          then: oneloop
      host:
        - oneloop
      run:
        - oneloop
      run_exports:
        - ${{ pin_subpackage('ninja-hep-ph', upper_bound='x.x') }}
    tests:
      - package_contents:
          include:
            exists:
              - mninja.mod
              - ninja/avholo.hh
              - ninja/integral_library.hh
              - ninja/momentum.hh
              - ninja/ninja.hh
              - ninja/ninja_config.h
              - ninja/ninja_in.hh
              - ninja/ninjanumgen.hh
              - ninja/num_defs.hh
              - ninja/rambo.hh
              - ninja/s_mat.hh
              - ninja/spinors.hh
              - ninja/static_arrays.hh
              - ninja/tensor_ninja.hh
              - ninja/thread_safe_integral_library.hh
              - ninja/types.hh
              - ninja/zero_float.hh
              - ninjago_module.mod
              - ninjavholo.mod
              - if: (linux and (x86_64 or ppc64le))
                then:
                  - quadninja/avholo.hh
                  - quadninja/integral_library.hh
                  - quadninja/momentum.hh
                  - quadninja/ninja.hh
                  - quadninja/ninja_config.h
                  - quadninja/ninja_in.hh
                  - quadninja/ninjanumgen.hh
                  - quadninja/num_defs.hh
                  - quadninja/quadruple.hh
                  - quadninja/rambo.hh
                  - quadninja/s_mat.hh
                  - quadninja/spinors.hh
                  - quadninja/static_arrays.hh
                  - quadninja/tensor_ninja.hh
                  - quadninja/thread_safe_integral_library.hh
                  - quadninja/types.hh
                  - quadninja/zero_float.hh
            not_exists:
              - ninja/looptools.hh
              - if: (linux and (x86_64 or ppc64le))
                then:
                  - quadninja/looptools.hh
                else:
                  - quadninja/*
          lib:
            exists:
              - ninja
            not_exists:
              # c.f. https://github.com/conda/conda-build/issues/3075
              - libninja.la
              - libninja.a
          bin:
            - ninja-config

      - files:
          # As need to regenerate Makefiles, need all of the source files that
          # configure uses to do so
          source:
            - examples/
            - m4/
            - src/
            - Makefile.am
            - configure.ac
        requirements:
          run:
            - ${{ compiler('cxx') }}
            - ${{ compiler('fortran') }}
            - automake
            - libtool
            - make
            - gawk
            - sed
            - grep
        script:
          - ninja-config --help
          - ninja-config --version
          - ninja-config --quadsupport

          # Given the way the examples/Makefile works, need to regenerate it and
          # other supporting files with configure again
          - autoreconf --install

          - if: (linux and (x86_64 or ppc64le))
            then: ./configure --prefix=$PREFIX --enable-shared=yes --enable-static=no --enable-higher_rank --enable-quadninja --with-avholo="$FFLAGS -lavh_olo" FCINCLUDE="${FCINCLUDE} -I$PREFIX/include/oneloop"
            else:
              - ./configure --prefix=$PREFIX --enable-shared=yes --enable-static=no --enable-higher_rank --disable-quadninja --with-avholo="$FFLAGS -lavh_olo" FCINCLUDE="${FCINCLUDE} -I$PREFIX/include/oneloop"
              - if: osx
                then: ./configure --prefix=$PREFIX --enable-shared=yes --enable-static=no --enable-higher_rank --disable-quadninja --with-avholo="$FFLAGS -lavh_olo" FCINCLUDE="${FCINCLUDE} -I$PREFIX/include/oneloop" CXX="${CXX}" CXXFLAGS="-O2 -fcx-fortran-rules -fno-exceptions -fno-rtti ${CXXFLAGS}" CPPFLAGS="${CPPFLAGS} -DNINJA_NO_EXCEPTIONS -fPIC" LIBS="-lc++" LDFLAGS="-Wl,-no_compact_unwind ${LDFLAGS}"
          - make clean
          - make examples

          - cd examples
          - echo -e "\n# simple_test"
          - ./simple_test
          - echo -e "\n# simple_higher_rank_test"
          - ./simple_higher_rank_test
          - echo -e "\n# tensor_test"
          - ./tensor_test
          - echo -e "\n# tensor_higher_rank_test"
          - ./tensor_higher_rank_test
          - echo -e "\n# 4photons"
          - ./4photons
          - echo -e "\n# 6photons"
          - ./6photons
          - echo -e "\n# ttbarh"
          - ./ttbarh

          # Show how to build manually
          - make clean
          - echo -e "\n# simple_test by hand"
          - if: (linux and (x86_64 or ppc64le))
            then: $CXX simple_test.cc mynum.cc -o simple_test $CXXFLAGS -I./ -I$PREFIX/include/ninja $LDFLAGS -lninja -lavh_olo -lgfortran -lquadmath
            else: $CXX simple_test.cc mynum.cc -o simple_test $CXXFLAGS -I./ -I$PREFIX/include/ninja $LDFLAGS -lninja -lavh_olo -lgfortran
          - ./simple_test

          - make clean
          - cd ..
          - make clean

  - package:
      name: ${{ name }}-hep-ph-static
    build:
      skip: win
      script:
        file: build_static.sh
    requirements:
      build:
        - ${{ stdlib('c') }}
        - ${{ compiler('cxx') }}
        - ${{ compiler('fortran') }}
        - automake  # includes autoconf
        - libtool
        - make
        - pkg-config
        - gnuconfig
        - gawk
        - sed
        - grep
        - if: build_platform != target_platform
          then: oneloop-static
      host:
        - oneloop-static
    tests:
      - package_contents:
          files:
            exists:
              - lib/libninja.a
            not_exists:
              # c.f. https://github.com/conda/conda-build/issues/3075
              - lib/libninja.la
          include:
            exists:
              - mninja.mod
              - ninja/avholo.hh
              - ninja/integral_library.hh
              - ninja/momentum.hh
              - ninja/ninja.hh
              - ninja/ninja_config.h
              - ninja/ninja_in.hh
              - ninja/ninjanumgen.hh
              - ninja/num_defs.hh
              - ninja/rambo.hh
              - ninja/s_mat.hh
              - ninja/spinors.hh
              - ninja/static_arrays.hh
              - ninja/tensor_ninja.hh
              - ninja/thread_safe_integral_library.hh
              - ninja/types.hh
              - ninja/zero_float.hh
              - ninjago_module.mod
              - ninjavholo.mod
              - if: (linux and (x86_64 or ppc64le))
                then:
                  - quadninja/avholo.hh
                  - quadninja/integral_library.hh
                  - quadninja/momentum.hh
                  - quadninja/ninja.hh
                  - quadninja/ninja_config.h
                  - quadninja/ninja_in.hh
                  - quadninja/ninjanumgen.hh
                  - quadninja/num_defs.hh
                  - quadninja/quadruple.hh
                  - quadninja/rambo.hh
                  - quadninja/s_mat.hh
                  - quadninja/spinors.hh
                  - quadninja/static_arrays.hh
                  - quadninja/tensor_ninja.hh
                  - quadninja/thread_safe_integral_library.hh
                  - quadninja/types.hh
                  - quadninja/zero_float.hh
            not_exists:
              - ninja/looptools.hh
              - if: (linux and (x86_64 or ppc64le))
                then:
                  - quadninja/looptools.hh
                else:
                  - quadninja/*
          lib:
            not_exists:
              - ninja
          bin:
            - ninja-config

      - files:
          source:
            - examples/
            - m4/
            - src/
            - Makefile.am
            - configure.ac
        requirements:
          run:
            - ${{ compiler('cxx') }}
            - ${{ compiler('fortran') }}
            - automake
            - libtool
            - make
            - pkg-config
            - gnuconfig
            - gawk
            - sed
            - grep
            # libavh_olo.a is needed at linktime, but not at runtime
            - oneloop-static
        script:
          - ninja-config --help
          - ninja-config --version
          - ninja-config --quadsupport

          # Given the way the examples/Makefile works, need to regenerate it and
          # other supporting files with configure again
          - autoreconf --install
          - if: (linux and (x86_64 or ppc64le))
            then: ./configure --prefix=$PREFIX --enable-shared=no --enable-static=yes --enable-higher_rank --enable-quadninja --with-avholo="${FFLAGS} -lavh_olo -lgfortran" FCINCLUDE="${FCINCLUDE} -I${PREFIX}/include/oneloop" LDFLAGS="${LDFLAGS}"
            else:
              - if: osx
                then: ./configure --prefix=$PREFIX --enable-shared=no --enable-static=yes --enable-higher_rank --disable-quadninja --with-avholo="${FFLAGS} -lavh_olo -lgfortran" FCINCLUDE="${FCINCLUDE} -I${PREFIX}/include/oneloop" CXX="${CXX}" CXXFLAGS="-O2 -fcx-fortran-rules -fno-exceptions -fno-rtti ${CXXFLAGS}" CPPFLAGS="${CPPFLAGS} -DNINJA_NO_EXCEPTIONS -fPIC" LIBS="-lc++" LDFLAGS="-Wl,-no_compact_unwind ${LDFLAGS}"
                else: ./configure --prefix=$PREFIX --enable-shared=no --enable-static=yes --enable-higher_rank --disable-quadninja --with-avholo="${FFLAGS} -lavh_olo -lgfortran" FCINCLUDE="${FCINCLUDE} -I${PREFIX}/include/oneloop" LDFLAGS="${LDFLAGS}"
          - make clean
          - make examples

          - cd examples
          - echo -e "\n# simple_test"
          - ./simple_test
          - echo -e "\n# simple_higher_rank_test"
          - ./simple_higher_rank_test
          - echo -e "\n# tensor_test"
          - ./tensor_test
          - echo -e "\n# tensor_higher_rank_test"
          - ./tensor_higher_rank_test
          - echo -e "\n# 4photons"
          - ./4photons
          - echo -e "\n# 6photons"
          - ./6photons
          - echo -e "\n# ttbarh"
          - ./ttbarh

          # Show how to build manually
          - make clean
          - echo -e "\n# simple_test by hand"
          - if: (linux and (x86_64 or ppc64le))
            then: $CXX simple_test.cc mynum.cc -o simple_test $CXXFLAGS -I./ -I$PREFIX/include/ninja $LDFLAGS -lninja -lavh_olo -lgfortran -lquadmath
            else: $CXX simple_test.cc mynum.cc -o simple_test $CXXFLAGS -I./ -I$PREFIX/include/ninja $LDFLAGS -lninja -lavh_olo -lgfortran
          - ./simple_test

          - make clean
          - cd ..
          - make clean

about:
  summary: "Ninja: Automated Integrand Reduction via Laurent Expansion for One-Loop Amplitudes"
  description: |
    Ninja implements the Laurent series expansion method for the computation of
    one-loop integrals.

    It is based on:
    * P. Mastrolia, E. Mirabella and T. Peraro, "_Integrand reduction of
    one-loop scattering amplitudes through Laurent series expansion_,"
    JHEP 1206 (2012) 095
    [arXiv:1203.0291 [hep-ph]](https://arxiv.org/abs/1203.0291)
    DOI: [10.1007/JHEP06(2012)095](https://doi.org/10.1007/JHEP06(2012)095)
    * T. Peraro, "_Ninja: Automated Integrand Reduction via Laurent Expansion
    for One-Loop Amplitudes_," Comput. Phys. Commun. 185 (2014) 2771
    [arXiv:1403.1229 [hep-ph]](http://arxiv.org/abs/1403.1229)
    DOI: [10.1016/j.cpc.2014.06.017](https://doi.org/10.1016/j.cpc.2014.06.017)
  license: GPL-3.0-only
  license_file: COPYING
  homepage: https://github.com/peraro/ninja
  repository: https://github.com/peraro/ninja

extra:
  feedstock-name: ninja-hep-ph
  recipe-maintainers:
    - matthewfeickert
